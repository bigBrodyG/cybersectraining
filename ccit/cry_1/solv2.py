from math import gcd
from Crypto.Util.number import bytes_to_long, long_to_bytes

# Given values
n1 = 487100160628564396341746747316787813417940924983054319118182397199685114525771997523237801751734149041066746591922750610970882665197101436098399597331150661270018021611392205066862244906141393787678765020366400134557120439351830755594125598460906907227974120397936084087981912474720698058742409423462987237379995660908382016565059984785186233584847380734042377415344564759163230431180715885391852459488083822845706376673445130717200716932831705980229121868258684541031539717078179265838088603116929431989026799727329165250468003470666359240907422854709206890798685040968849187562213230591104041514086133019700215483505790724479290748603623807787853834601913446378484812460493876768819656750955598951884142766045941153124574426230230189242845708608070869042677423320170775409331672704153610100550217234728219748652666165064268539570731724756634589091267981919587204534699134319613699364289640071999750422619376383269244373505727074333235787529720152791597575445077458261581882503196964989720665492963505389189634297685465770970420423833090953487312161688276926617261292767910467424229716253308066762344653798152676057528533126167867653005937842179370572864046432128231046273320616034899353307852205948220905856353201330658096674863329373243793944819877553399380759323056232984270355731219046148495675746819302093178287658074252132185159914213344600137628318625331331807069576319146338237431987473091292863571459052060047492720153622350611168767807805854575042689243507185973605778643213288869191643390601548005731009545803425241309318095387392655460432487422861193264776389973831301453779402243521553533361941363085605381296675510250132380783250611824311791750048125356845818044251641144809650500040880502563219867223392762726852753771052928340285806700939819101900342014043283467490126945888767640949698811385458581000225466939490380055354763364401213248001294151492993481160938134244577806681105446169113464473073320183799105664263171442667682907720545855461309409982868740112433629125205447475482207133829788621094872128973532341110972656730053402832843096066261084575288313976010656696952932238333090805775733666386481839849213135532578679523651814337555161646570416871414030922151886254830759302845903261311087594701801275052983914647662109861250511092069455938625140946975518425933318466210656567327620111540075329966111613118521728869100219683902474828035479050735298113403676500945686457544908641138294635350909632586489168273274494468556485505519686376437903
n2 = 506859341240857302483736670079798671911979441107521181726179070236769945929685068857464890561641061852879187884387143877054449005250495499225502950717193601554944352697718025577139721646351085542585263657999310692060300674531243424579278716344549856008059024102330610738691167708432479585225820704857303903132197921260250786857287338401806709449732613418109830438240585378144699921635392302876021296491787021560497240555659437315263957865369644922691161516794317409058205614517865342122339507164673226649663640258434834924346020240859020717544622258014780878602914862767345595493293712885621093139445583832565805214536955891543360940404477527957107620724305032541927036253267907898063048644861668499228488505373235732365236032343749590780009864672760406348222021738400735930397386967760408695145233425927901934034117633374482330759807535024567038424606918369891202470517606113434503151849844412442324055379563223429208695772104381813136676336278331667063220105697199723159170351488313469041920934931654949126324663208218800452508564446968749446380600305968714926598106748347400871530358631757881228933216090828898462576391662339103536813546868330733991850230925363046201512619346069680269807693358889344649771754693871147652481500192851707204128040600319864515554828122346147196861899652800217944000397870020514196086522148746353529078964062933052316981029594232464360962283841618090021697904444444119432523168269160144400670435882077717074717093096390865139277091205045536314934884600766925205170389449860800653680753954424138793692939504190263077303093021870006438037320199600019129171899295996495520062171682954120007499977887600800736191803818049886514982977300899277754396292089516029230258094324217657748376797484549628192525414253815816276360003141827667198412145202376370919099856824490995535273325228200712349302220328447288652750787634952760531686478369047761745982099463211967166858072830712837123179960736396106146100645540761983507517039918854917685209201794267466614430555598717951864306689298985174382834760085825994027762521793875827814437783442725339664918200140915223312175715327790925953398480963100656788708655385124576932137818395086629947038734872599479840283951797900418776509928432182757140757030833034605872220821633661531315356222954547918539677828187193859850268965006084896921717739985869112016651208036612909000201603236615615811866192874123717751310030456814679891813139215887580483104545107114264026647404888618734003149639320002789741
enc_hex = '28e1a036ef9e86faeb1e4a7b72c674aecd4cb93a983c08ca53e4c5db8b51c4483fbae650087ae22c80d0df542148b6dfc4c0265c8e18112670959d796e447444e4ec83116f7f4fa168553b7fa42cc52f1f812765c04cf7641006b00ada7671d8969a8c9a8c5f5e5fa27bfdd90c46b5a630fc3a0f04d8eb5eb9f52e5b95e42a0eeebc673457cf520b5e10ed9366813ef904bc6f485bdb9240b6d2856c10e44fb2a8827d62e120242afee06da545c803c7ea3c4c6ac4262d34fdef4c0743a0cd5f41c6f780eada765444dcbc14abba41cf1c9e110dc7c30a60474f67bea88407b7a57e483294c1e87918f11b36589dfcf6da0301b761e2542dfddc42b43f9a4ebdd372ef822496f3e41c0a35b4a6791dfcf8c470ee57930bb029ded14e0cc0ef7b27cd2ff93ef48b14b63b70d90557ee94eb9afcf6a87c1fedad62d4c334aa824fe5e74d00f228327fca9e1b92dd80234fd6f7a5e4aed368b93ce5aa13b4dc1540a0f5bb4ab6c72d01e79d18c1a5fe01846d2ce1bed6ad8a69667c7122b5e9061ef85b619a38b1f943372ec9b0fdbe7d48646ae8896c056f73780eb9a1a033d6c96ba8d68766efdd34e309fe741bc36dbc397746deb3c1f2b76247f30dc06068a1865efb517f3d1460ee13c055b69147852e85870cf404f38992cdfcea31fb5e3b6be91888d1d3cabcdf584caae0331f3a7255ed83f33c9d1f3331606fcae737ef71603fb2d615ebd0b9c44eb49818899d05448a4d4aa51a1eab6acafe6bd3968eff118e4b6a89bd6eff66819205d24e0a0757936756f6ed877babbe35eab704aa089da017d8c83361c0725d114a174de020ceedd50d84dc6dcd58d56ede220ffd3c0ee663ed78c812698631d442448b26d377653d92bce4c2eb110d177fc2cdd5d49ba5ef4659ba6ad1fe7c2f4f6c4a7df802b70197201975dae7fdd86ba417a1f4c086f5beb0cb3908607e8a2504b9b8a8b12ef96c98ef07ffef2622ece6db014c0b1d660e8d3bd447d89901cc216444991d5df828dd6f55f9fc152b176ac4d3171760b906d94c9287d87b0445baa2d30a63933db40d7c87ed1666e3989b680a82c6eaaf19a15fea3a24853c4812cb65dccafa2f08af861cfa571f9024873bc3277e0f236efd8f78ac5d536df94409a7ca8bfebf2ab88dc2b6bf804d4442d7bd1a09c856e8ca443f056cba846051f1e0d3a352ab4d3e862f7fe873c6696ab70d95be72f79bd0091b5b00724897c7af968b9ed273a0470873057b6c514b6276019d3931025f6d12f328fcc45f9a69409247f06c9ca4d799a0538376610f6834da5775eb694f9ca1fa5248906c8c2b613cfc2cf8d65ce2a1114d97baf0129f41422af2b401927835f4910a4ec8cfbe885789554e6bdfebafce20658a00ab11e8e25d62d20b420562d7bea9934c6f30674dd995a5d1bd0e169e00c02d1c611381a5'

enc_bytes = bytes.fromhex(enc_hex)
enc = bytes_to_long(enc_bytes)

# Compute common prime p
p = gcd(n1, n2)
assert p != 1, "No common prime found. Check the input moduli."

# Compute q1 and q2
q1 = n1 // p
q2 = n2 // p

# Validate primes
assert p * q1 == n1
assert p * q2 == n2

# Compute private exponents
e = 65537
phi1 = (p - 1) * (q1 - 1)
phi2 = (p - 1) * (q2 - 1)
d1 = pow(e, -1, phi1)
d2 = pow(e, -1, phi2)

# Decrypt the flag
tmp = pow(enc, d2, n2)
plaintext = pow(tmp, d1, n1)

# Convert to flag
flag = long_to_bytes(plaintext).decode()
print(flag)